# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build and test Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install ".[tests]"
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Lint with Ruff
      run: |
        pip install ruff
        ruff check --output-format=github .
      continue-on-error: true
    - name: Test with pytest
      run: |
        pytest

  deploy-to-gae:
    if: startsWith(github.ref, 'refs/heads/main')  # only deploy if its a push to main
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs:
    - build-and-test
    name: Check out and deploy to GAE
    steps:
    - id: 'checkout'
      uses: 'actions/checkout@v4'
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: '${{ vars.GOOGLE_WIF_PROVIDER_NAME }}'
        service_account: '${{ vars.GOOGLE_SERVICE_ACCOUNT_EMAIL }}'

    - id: 'deploy'
      name: "Deploy to App Engine"
      uses: 'google-github-actions/deploy-appengine@v2'
      with:
        project_id: '${{ vars.GOOGLE_PROJECT_ID }}'

    # Example of using the output
    - id: 'test'
      name: "Check operational status"
      run: |-
        curl '${{ steps.deploy.outputs.version_url }}' \
        --silent \
        --fail \
        --location \
        --retry 5 \
        --retry-connrefused \
        --retry-delay 5 \
        --retry-max-time 300
